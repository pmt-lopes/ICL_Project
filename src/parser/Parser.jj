options {
  STATIC=false;
}

PARSER_BEGIN(Parser)

package parser;
import ast.*;
import java.util.ArrayList;
import java.util.List;

public class Parser {

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < EQ: "=" >
  |
  < NEQ: "!=" >
  |
  < AND: "&&" >
  |
  < OR: "||" >
  |
  < NEG: "~" >
  |
  < GR: ">" >
  |
  < LR: "<" >
  |
  < GRE: ">=" >
  |
  < LRE: "<=" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < LET: "let" >
  |
  < IN: "in" >
  |
  < IF: "if" >
  |
  < THEN: "then" >
  |
  < ELSE: "else" >
  |
  < WHILE: "while" >
  |
  < DO: "do" >
  |
  < END: "end" >
  |
  < SEMICOLON: ";" >
  |
  < REF: ":=" >
  |
  < REREF: "::=" >
  |
  < DEREF: "!" >
  |
  < PRINT: "print" >
  |
  < PRINTLN: "println" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

Exp Start():
{ Exp e; }
{
   e = statement() <EL>  { return e; }
}

Exp statement():
{ Exp e; }
{
    e = decl()
    | e = whileStatement()
    | e = ifStatement()
    | e = expr()
    {return e;}
}

Exp decl():
{ List<Exp> bindings = new ArrayList<Exp>();Token id; Exp e, e1, e2; }
{
  <LET> (
    id = <Id> <EQ> e1 = boolExp() { bindings.add(new ASTId(id.image, e1)); }
  )+ <IN> e2 = boolExp() {
    ASTLet letExpr = new ASTLet();
    letExpr.setBindings(bindings);
    letExpr.setBody(e2);
    e = letExpr;
    return e;
    }
  | e = boolExp()
  { return e;}
    
}

//not tested from here
//makes more sense for these expressions to be inside declarations then the opposite
Exp whileStatement():
{ Exp cond, doStatement; }
{
  < WHILE > cond = boolExp() < DO > doStatement = seq() < END >{ return new ASTWhile(cond, doStatement); }
}

Exp ifStatement():
{ Exp cond, thenPart; Exp elsePart = null; }
 {
    < IF > cond = boolExp() <THEN > thenPart = seq() (< ELSE > elsePart = seq())?
    <END> { return new ASTIf(cond, thenPart, elsePart); }
 }


//Sequential instructions should be added around here i think
//Referencing too

Exp seq():
{ Exp e1, e2; }
{
	e1 = ref() (
	  <SEMICOLON> e2 = seq() { e1 = new ASTSeq(e1, e2); }
	)?
	{ return e1; }
}

Exp ref():
{ Exp e1; Token x; }
{
  
  (x = <Id>) <REF> e1 = Fact() { return new ASTRef(x.image, e1); }
  | 
  e1 = boolExp() { return e1; }
}
// Not tested until here

// describes boolean expressions
Exp boolExp():
{ Exp e1, e2; }
{
  <NEG> e2 = boolExp() { return new ASTNeg(e2); }
	| 
  e1 = cmp() (
	<AND> e2 = boolExp() { e1 = new ASTAnd(e1, e2); }
	| <OR> e2 = boolExp() { e1 = new ASTOr(e1, e2); } )*
  { return e1; }
}

Exp bool():
{Token x;}
{
    x = <TRUE> { return new ASTBool(true); }
     |
    x = <FALSE> { return new ASTBool(false); }
}

// comparison of bool values into a single bool value
Exp cmp():
{ Exp e1, e2; }
{
  e1 = expr() (
    <EQ> e2 = expr() { e1 = new ASTEq(e1, e2); }
    | <GR> e2 = expr() { e1 = new ASTGr(e1, e2); }
    | <LR> e2 = expr() { e1 = new ASTGr(e2, e1); }
    | <GRE> e2 = expr() { e1 = new ASTGrE(e1, e2); }
    | <LRE> e2 = expr() { e1 = new ASTGrE(e2, e1); }
    | <NEQ> e2 = expr() { e1 = new ASTNEq(e1, e2); } 
  )?
  { return e1; }
}

// expr is either term value(bool,int,ref) or a mult/division of values or add/sub of values
Exp expr() :
{ Exp e1, e2; }
{
   e1 = Term() 
     ( <PLUS> e2 = expr() { e1 = new ASTAdd(e1,e2); }
     | <MINUS> e2 = expr() { e1 = new ASTSub(e1,e2); } )*
     { return e1; }
}

// term is either a value(bool,int,ref) or a mult/division of values
Exp Term() :
{ Exp e1, e2; }
{
     e1 = Fact()
     ( <TIMES> e2 = Term() { e1 = new ASTMult(e1,e2); }
     | <DIV> e2 = Term() { e1 = new ASTDiv(e1,e2); } )*
     { return e1; }
}

// defined by numbers or bool values
Exp Fact() :
{ Token x; Exp e;}
{
  	x = <Num> { return new ASTInt(Integer.parseInt(x.image));}
 |
 	<MINUS> x = <Num> { return new ASTInt(-Integer.parseInt(x.image));} 
 | 
 	e = bool() { return e; }
 |
	<LPAR> (e = expr() | e = decl()) <RPAR> { return e; }
 |
	x = <Id> { return new ASTId(x.image, null);}
 |
	< DEREF > x = < Id > { return new ASTDeref(x.image); }
}



