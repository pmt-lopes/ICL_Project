options {
  STATIC=false;
}

PARSER_BEGIN(Parser)
package parser;
import ast.*;
import java.util.ArrayList;
import java.util.List;

public class Parser {
}

PARSER_END(Parser)

TOKEN:
{
  <NUM: (["0"-"9"])+>
| <PLUS: "+">
| <MINUS: "-">
| <TIMES: "*">
| <DIV: "/">
| <LPAR: "(">
| <RPAR: ")">
| <EL: "\n">
| <EQ: "=">
| <NEQ: "!=">
| <AND: "&&">
| <OR: "||">
| <NEG: "~">
| <GR: ">" >
| <LR: "<">
| <GRE: ">=">
| <LRE: "<=">
| <TRUE: "true">
| <FALSE: "false">
| <LET: "let">
| <IN: "in">
| <IF: "if">
| <THEN: "then">
| <ELSE: "else">
| <WHILE: "while">
| <DO: "do">
| <END: "end">
| <SEMICOLON: ";">
| <REF: ":=">
| <REREF: "::=">
| <DEREF: "!">
| <NEW: "new">
| <PRINT: "print">
| <PRINTLN: "println">
| <COMMA: ",">
| <UNIT: "unit">
| <INT: "int">
| <BOOL: "bool">
| <FUN: "fun">
| <ARROW: "->">
| <ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])*>
}

SKIP:
{
  " " // Skipping whitespace characters
}



Exp Start() : {
  Exp exp;
}
{
  exp=seq() <EL> { return exp; }
}

Exp seq():
{ Token op;
  Exp t1, t2; }
{
     t1=expression() (  op=<SEMICOLON>  t2=expression()
               { t1 = new ASTSeq(t1,t2); }
               ) *
     { return t1; }
}

//Exp ref() :
//{Token n;
//  Exp q1, q2;}
//{
//     q1 = expression() ( <REF> q2=expression()
//    			 {
//                    q1 = new ASTRef(q1,q2);
//                 }
//                  )?
//     { return q1; }
//
//}

Exp expression() : {
  Exp left, right;
  Token op;
}
{
  left = term() (
    ( op = <PLUS> | op = <MINUS>
    | op = <EQ> | op = <NEQ> | op = <GR> | op = <GRE> | op = <LR> | op = <LRE>
    | op = <AND> | op = <OR> )
    right = term()
    {
      switch(op.kind) {
        case PLUS: left = new ASTAdd(left, right); break;
        case MINUS: left = new ASTSub(left, right); break;
        case EQ: left = new ASTEq(left, right); break;
        case NEQ: left = new ASTNEq(left, right); break;
        case GR: left = new ASTGr(left, right); break;
        case GRE: left = new ASTGrE(left, right); break;
        case LR: left = new ASTGr(right, left); break;
        case LRE: left = new ASTGrE(right, left); break;
        case AND: left = new ASTAnd(left, right); break;
        case OR: left = new ASTOr(left, right); break;
      }
    }
  )*
  { return left; }
}

Exp term() : {
  Exp primary, exp;
  Token op;
}
{
  primary=primaryExpression()  (
    (op = <TIMES> | op = <DIV>) exp=primaryExpression()
    {
      switch(op.kind) {
        case TIMES: return new ASTMult(primary, exp); break;
        case DIV: return new ASTDiv(primary, exp); break;
      }
    }
  )*
  { return primary; }
}

//Exp simpleExpression() : {
//  Exp primary, exp; Token op;
//}
//{
//  primary=primaryExpression()
//  (
//    <REF> exp=expression() { return new ASTRef(primary, exp); }
//    |
//    <REREF> exp=expression() { return new ASTReref(primary, exp); }
//    |
//    <DEREF> exp = expression() { return new ASTDeref(exp); }
//  )*
//  { return primary; }
//}



Exp primaryExpression() : {
  Token id;
  Exp exp, exp1, exp2;
  Exp exp3 = null;
}
{

    <NUM> { return new ASTInt(Integer.parseInt(token.image)); }
    |
    <TRUE> { return new ASTBool(true); }
    |
    <FALSE> { return new ASTBool(false); }
    |
    id=<ID> ( <REF> exp3=expression() )? { return new ASTRef(id.image,exp3); }
    |
    <DEREF> id=<ID> { return new ASTDeref(id.image); }
    |
    <MINUS> <NUM> { return new ASTInt(-Integer.parseInt(token.image)); }
    |
    <NEG> exp=primaryExpression() { return new ASTNeg(exp); }
    |
    <LET> id=<ID> <EQ> exp1=seq() <IN> exp2=seq() <END>
    { ASTLet let = new ASTLet(); let.addToken(id.image); let.addBinding(exp1); let.setBody(exp2); return let;}
    |
    <IF> exp=seq() <THEN> exp1=seq() ( <ELSE> exp3=seq() )? <END> { return new ASTIf(exp, exp1, exp3); }
    |
    <WHILE> exp1=seq() <DO> exp2=seq() <END> { return new ASTWhile(exp1, exp2); }
    |
    <PRINTLN> exp=expression() { return new ASTPrintln(exp); }
    |
    <PRINT> exp=expression() { return new ASTPrint(exp); }
    |
    <NEW> exp=expression() { return new ASTNew(exp); }
    |
    <LPAR> (<RPAR> | exp3=expression() <RPAR>) { if(exp3 != null) return exp3; else return new ASTNull(); }

}

